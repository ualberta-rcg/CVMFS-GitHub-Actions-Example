name: Examples of how to use Compute Canada CVMFS Software Stack with GitHub Actions

on:
  workflow_dispatch: # Allows you to run this manually from the Actions tab

jobs:
  build-with-alliance-stack:
    name: Build with Alliance/Compute Canada Software
    runs-on: ubuntu-latest # This works on standard GitHub runners

    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v4

      # 1. This is the key step that sets up CVMFS
      #    We specify the repository names for the Digital Research Alliance of Canada.
      - name: üìÇ Mount Compute Canada CVMFS Repositories
        uses: cvmfs-contrib/github-action-cvmfs@v2
        with:
          cvmfs_repositories: 'soft.computecanada.ca,containers.computecanada.ca'

      # 2. Verify the mount and initialize the software environment
      #    This is the standard procedure for using their software stack.
      - name: ‚úÖ Verify Mount & Initialize Environment
        run: |
          echo "--- Verifying CVMFS mounts are available ---"
          ls /cvmfs/
          if [ ! -d "/cvmfs/soft.computecanada.ca" ]; then
            echo "‚ùå ERROR: CVMFS repository 'soft.computecanada.ca' not found!"
            exit 1
          fi
          echo "‚úÖ CVMFS mounts look good."

          echo ""
          echo "--- Sourcing the Alliance/Compute Canada environment profile ---"
          # This script sets up the 'module' command and other environment variables
          source /cvmfs/soft.computecanada.ca/config/profile/bash.sh
          
          echo "--- Checking module system version ---"
          module --version

      # 3. Use the software stack
      #    Now you can use the 'module' command just like on a cluster.
      - name: ‚öôÔ∏è Use Software from CVMFS
        run: |
          echo "--- Sourcing the environment again for this step ---"
          # Each 'run' step is a new shell, so you must source the setup script again
          source /cvmfs/soft.computecanada.ca/config/profile/bash.sh
          
          echo "--- Searching for available GCC modules ---"
          module avail gcc
          
          echo ""
          echo "--- Loading a specific GCC module and checking its version ---"
          module load gcc/12.3
          gcc --version

      - name: üß™ Run CP2K Simulation (water molecule)
        run: |
          echo "--- Sourcing CVMFS environment ---"
          source /cvmfs/soft.computecanada.ca/config/profile/bash.sh
          module --force purge
          module load StdEnv/2023 gcc/12.3 cp2k/2023.2

          echo "--- Creating water molecule input file ---"
          cat <<EOF > water.inp
          &GLOBAL
            PROJECT water
            RUN_TYPE ENERGY
          &END GLOBAL
          &FORCE_EVAL
            METHOD QUICKSTEP
            &DFT
              BASIS_SET_FILE_NAME BASIS_MOLOPT
              POTENTIAL_FILE_NAME GTH_POTENTIALS
              &MGRID
                CUTOFF 280
              &END MGRID
              &XC
                &XC_FUNCTIONAL PBE
                &END XC_FUNCTIONAL
              &END XC
            &END DFT
            &SUBSYS
              &CELL
                ABC 10.0 10.0 10.0
              &END CELL
              &COORD
                O 0.000 0.000 0.000
                H 0.758 0.000 0.504
                H -0.758 0.000 0.504
              &END COORD
              &KIND H
                BASIS_SET DZVP-MOLOPT-SR-GTH
                POTENTIAL GTH-PBE-q1
              &END KIND
              &KIND O
                BASIS_SET DZVP-MOLOPT-SR-GTH
                POTENTIAL GTH-PBE-q6
              &END KIND
            &END SUBSYS
          &END FORCE_EVAL
EOF

          echo "--- Running CP2K ---"
          cp2k.psmp -i water.inp > water.out

          echo "--- Printing final SCF energy ---"
          grep "ENERGY|" water.out | tail -1

